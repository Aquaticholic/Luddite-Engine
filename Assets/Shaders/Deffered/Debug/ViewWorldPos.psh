Texture2D<float4> g_SubpassInputColor;
SamplerState      g_SubpassInputColor_sampler;

Texture2D<float4> g_SubpassInputNormal;
SamplerState      g_SubpassInputNormal_sampler;

Texture2D<float4> g_SubpassInputDepthZ;
SamplerState      g_SubpassInputDepthZ_sampler;

cbuffer ShaderConstants
{
    float4x4 g_InverseProjectionMatrix;
    float4x4 g_InverseViewMatrix;
};

struct PSInput
{
    float4 Pos    : SV_POSITION;
    float2 UV     : TEX_COORD;
};

struct PSOutput
{
    float4 Color : SV_TARGET0;
};

struct GBufferData
{
    float3 Diffuse;
    float3 Normal;
    float Metallic;
    float Roughness;
    float Depth;
};

GBufferData UnpackGBuffer(PSInput  PSIn)
{
    GBufferData output;
    float4 Diffuse_Metallic = g_SubpassInputColor.Load(int3(PSIn.Pos.xy, 0));
    output.Diffuse = Diffuse_Metallic.rgb;
    output.Metallic = Diffuse_Metallic.a;

    float4 Normal_Roughness = g_SubpassInputNormal.Load(int3(PSIn.Pos.xy, 0));
    output.Normal = normalize((Normal_Roughness.rgb * 2.0f) - 1.0f);
    output.Roughness = Normal_Roughness.a;

    output.Depth = g_SubpassInputDepthZ.Load(int3(PSIn.Pos.xy, 0)).x;

    return output;
}

float3  DepthToWorldPos(float2 uv, float depth, float4x4 inverse_projection_matrix, float4x4 inverse_view_matrix) {
    // float z = depth * 2.0 - 1.0;
    float z = depth;

    float4 clipSpacePosition = float4(uv * 2.0 - 1.0, z, 1.0);
    // float4 clipSpacePosition = float4(uv, z, 1.0);
    float4 viewSpacePosition = mul(inverse_projection_matrix, clipSpacePosition);
    // float4 viewSpacePosition = mul(clipSpacePosition, inverse_projection_matrix);

    viewSpacePosition /= viewSpacePosition.w;

    float4 worldSpacePosition = mul(inverse_view_matrix, viewSpacePosition);
    // float4 worldSpacePosition = mul(viewSpacePosition, inverse_view_matrix);

    return worldSpacePosition.xyz;
}

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    GBufferData g_buffer_data = UnpackGBuffer(PSIn);
    if (g_buffer_data.Depth == 1.0)
        discard;

    PSOut.Color.rgb = DepthToWorldPos(PSIn.UV, g_buffer_data.Depth, g_InverseProjectionMatrix, g_InverseViewMatrix);

    PSOut.Color.a = 1.0;
}